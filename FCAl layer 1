#include <vector>
#include <iostream>
#include <TChain.h>
#include <TH1F.h>
#include <TGraphErrors.h>
#include <TF1.h>
#include <TCanvas.h>
#include <TString.h>
#include <TStyle.h>
#include <TLatex.h>  // Include TLatex for text rendering

// Load the TChain and add relevant data files
TChain chain("treeSC");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485090_v1.root");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485950_v1.root");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485051_v1.root");

const int nBins = 12;
double energyBins[nBins + 1] = {5, 10, 15, 20, 25, 30, 35, 40, 50, 100, 200, 300, 500};

std::vector<double> energyMidpoints;
std::vector<double> resolutions;
std::vector<double> errors;

// Set the style for fitting
gStyle->SetOptFit(1111);

for (int i = 0; i < nBins; ++i) {
    double energyMin = energyBins[i];
    double energyMax = energyBins[i + 1];
    double energyMidpoint = 0.5 * (energyMin + energyMax);

    TCanvas *cBin = new TCanvas(Form("cBin_%d", i), Form("Energy Bin %d: [%.1f, %.1f] GeV", i, energyMin, energyMax), 800, 600);
    
    // Create the draw command and selection criteria for sc_layer == 1 and sc_det == 3
    TString drawCmd = Form("ev_of_ettau/ev_of_et >> h_time_%d(200, -25, 25)", i);
    TString cutCmd = Form("ev_et > %f && ev_et < %f && sc_layer == 1 && sc_det == 3", energyMin * 1000 / 12.5, energyMax * 1000 / 12.5);
    chain.Draw(drawCmd, cutCmd, "goff");

    TH1F *h_time = (TH1F*)gDirectory->Get(Form("h_time_%d", i));
    if (!h_time) {
        std::cerr << "Histogram not found for energy range: [" << energyMin << ", " << energyMax << "] GeV" << std::endl;
        continue;
    }

    // Perform a preliminary Gaussian fit
    h_time->Fit("gaus", "Q0");
    TF1 *preFitFunction = h_time->GetFunction("gaus");

    if (preFitFunction) {
        double mean = preFitFunction->GetParameter(1);
        double sigma = preFitFunction->GetParameter(2);

        // Perform a more focused fit around the mean ± sigma
        h_time->Fit("gaus", "Q", "", mean - sigma, mean + sigma);
        h_time->SetTitle(Form("Time Distribution for Energy [%.1f, %.1f] GeV; Time [ns]; Counts", energyMin, energyMax));
        h_time->Draw();
        cBin->Update();

        TF1 *fitFunction = h_time->GetFunction("gaus");
        if (fitFunction) {
            double finalSigma = fitFunction->GetParameter(2);
            resolutions.push_back(finalSigma);
            energyMidpoints.push_back(energyMidpoint);
            double error = fitFunction->GetParError(2);
            errors.push_back(error);
        }
    }
}

// Create and plot the graph for energy vs. timing resolution
TGraphErrors *graph = new TGraphErrors(energyMidpoints.size(), &energyMidpoints[0], &resolutions[0], nullptr, &errors[0]);
graph->SetTitle("Resolution vs. Energy [Layer 1, sc_det == 3]; Energy [GeV]; Time Resolution [ns]");
graph->SetMarkerStyle(20);
graph->SetMarkerColor(kBlack);

// Set y-axis limits
graph->GetYaxis()->SetRangeUser(0, 4);  // Limit y-axis from 0 to 4 ns

// Fit the data to the custom function
TF1 *fitCustom = new TF1("fitCustom", "[0]/x + [1]", 5, 600);
fitCustom->SetParameter(0, 1);
fitCustom->SetParameter(1, 1);

graph->Fit(fitCustom, "R");

double p0 = fitCustom->GetParameter(0);
double p1 = fitCustom->GetParameter(1);

std::cout << "Fit Parameters:" << std::endl;
std::cout << "p0 = " << p0 << " ± " << fitCustom->GetParError(0) << std::endl;
std::cout << "p1 = " << p1 << " ± " << fitCustom->GetParError(1) << std::endl;

// Create a canvas for the final plot and draw
TCanvas *c1 = new TCanvas("c1", "Resolution vs. Energy", 800, 600);
graph->Draw("AP");
fitCustom->SetLineColor(kRed);
fitCustom->Draw("same");

// Add TLatex with the equation centered on the plot
TLatex lat;
lat.SetTextSize(0.04);  // Set the font size for the equation
lat.SetTextAlign(22);   // Align text to the center
lat.DrawLatexNDC(0.5, 0.5, " #sigma_{t}(E)=#sqrt{ #frac{p0^{2}}{E^{2}} + p1^{2}}");

c1->Update();

