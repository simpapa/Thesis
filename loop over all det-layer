#include <vector>
#include <iostream>
#include <TChain.h>
#include <TH1F.h>
#include <TGraphErrors.h>
#include <TF1.h>
#include <TCanvas.h>
#include <TString.h>
#include <TStyle.h>
#include <TLatex.h>

// Load the TChain and add relevant data files
TChain chain("treeSC");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485090_v1.root");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485950_v1.root");
chain.Add("/afs/cern.ch/work/n/nikiforo/public/output_485051_v1.root");

// Energy bin edges for variable binning
const int nBins = 6;
double energyBinEdges[nBins + 1] = {5, 10, 20, 50, 100, 200, 500}; // Variable bin edges

// Detector and layer information
const int nDetectors = 4;
const int layersPerDetector[] = {4, 4, 1, 3};  // EMB=4, EMEC=4, HEC=1 (no layer split), FCal=3
const char* detectorNames[] = {"EMB", "EMEC", "HEC", "FCal"};
const char* layerNames[] = {"Presampler", "Front", "Middle", "Back"};

// Store results for final resolution vs. energy plot
std::vector<double> energyMidpoints[nDetectors][4];
std::vector<double> resolutions[nDetectors][4];
std::vector<double> errors[nDetectors][4];

// Set the style for fitting
gStyle->SetOptFit(1111);
gStyle->SetStatFormat("6.3g");  // Set stat box precision to 3 significant figures

for (int det = 0; det < nDetectors; ++det) {
    int maxLayers = layersPerDetector[det];

    for (int layer = 0; layer < maxLayers; ++layer) {
        for (int i = 0; i < nBins; ++i) {
            double energyMin = energyBinEdges[i];
            double energyMax = energyBinEdges[i + 1];
            double energyMidpoint = 0.5 * (energyMin + energyMax);

            TCanvas* cBin = new TCanvas(Form("cBin_det%d_layer%d_bin%d", det, layer, i), "", 800, 600);

            // Build the selection criteria
            TString cutCmd;
            if (det == 2) {  // HEC: No layer split
                cutCmd = Form("ev_et > %f && ev_et < %f && sc_det == %d", energyMin * 1000 / 12.5, energyMax * 1000 / 12.5, det);
            } else {  // Other detectors
                cutCmd = Form("ev_et > %f && ev_et < %f && sc_det == %d && sc_layer == %d", energyMin * 1000 / 12.5, energyMax * 1000 / 12.5, det, layer);
            }

            TString histName = Form("h_time_det%d_layer%d_bin%d", det, layer, i);
            chain.Draw(Form("ev_of_ettau/ev_of_et >> %s(200, -25, 25)", histName.Data()), cutCmd, "goff");

            TH1F* h_time = (TH1F*)gDirectory->Get(histName);
            if (!h_time) {
                std::cerr << "Histogram not found for detector " << detectorNames[det] << ", layer " << layer
                          << ", energy range [" << energyMin << ", " << energyMax << "] GeV" << std::endl;
                continue;
            }

            // Perform a preliminary Gaussian fit
            h_time->Fit("gaus", "Q0");
            TF1* preFitFunction = h_time->GetFunction("gaus");

            if (preFitFunction) {
                double mean = preFitFunction->GetParameter(1);
                double sigma = preFitFunction->GetParameter(2);

                // Perform a more focused fit around the mean Â± sigma
                h_time->Fit("gaus", "Q", "", mean - sigma, mean + sigma);
                h_time->SetTitle("");
                h_time->GetXaxis()->SetTitle("Time [ns]");
                h_time->GetYaxis()->SetTitle("Counts");

                // Add detector and layer information
                TLatex info;
                info.SetTextSize(0.04);
                info.SetNDC();
                if (det == 2) {  // HEC: No layer split
                    info.DrawLatex(0.5, 0.9, Form("%s", detectorNames[det]));
                } else {  // Other detectors
                    info.DrawLatex(0.5, 0.9, Form("%s %s Layer", detectorNames[det], layerNames[layer]));
                }

                h_time->Draw();
                cBin->Update();

                TF1* fitFunction = h_time->GetFunction("gaus");
                if (fitFunction) {
                    double finalSigma = fitFunction->GetParameter(2);
                    double error = fitFunction->GetParError(2);

                    resolutions[det][layer].push_back(finalSigma);
                    energyMidpoints[det][layer].push_back(energyMidpoint);
                    errors[det][layer].push_back(error);
                }
            }

            // Save the canvas to LXPLUS
            cBin->SaveAs(Form("/afs/cern.ch/user/s/scranepa/det%d_layer%d_bin%d.pdf", det, layer, i));
            cBin->SaveAs(Form("/afs/cern.ch/user/s/scranepa/det%d_layer%d_bin%d.png", det, layer, i));
            cBin->SaveAs(Form("/afs/cern.ch/user/s/scranepa/det%d_layer%d_bin%d.C", det, layer, i));
        }
    }
}

// Create a resolution vs. energy graph for each detector and layer
for (int det = 0; det < nDetectors; ++det) {
    int maxLayers = layersPerDetector[det];

    for (int layer = 0; layer < maxLayers; ++layer) {
        TCanvas* cRes = new TCanvas(Form("cRes_det%d_layer%d", det, layer), "", 800, 600);
        TGraphErrors* graph = new TGraphErrors(
            energyMidpoints[det][layer].size(),
            &energyMidpoints[det][layer][0],
            &resolutions[det][layer][0],
            nullptr,
            &errors[det][layer][0]);

        graph->SetTitle("");
        graph->GetXaxis()->SetTitle("Energy [GeV]");
        graph->GetYaxis()->SetTitle("Time Resolution [ns]");
        graph->SetMarkerStyle(20);
        graph->SetMarkerColor(kBlack);

        // Add a fit to the resolution graph
        TF1* fitCustom = new TF1("fitCustom", "sqrt(([0]/x)**2 + [1]**2)", energyBinEdges[0], energyBinEdges[nBins]);
        fitCustom->SetParameters(1, 1);  // Initial guesses
        graph->Fit(fitCustom, "R");

        // Draw the graph
        graph->Draw("AP");
        fitCustom->SetLineColor(kRed);
        fitCustom->Draw("same");

        // Add equation to the graph
        double p0 = fitCustom->GetParameter(0);
        double p1 = fitCustom->GetParameter(1);
        TLatex eq;
        eq.SetTextSize(0.035);
        eq.SetNDC();
        eq.SetTextAlign(22);  // Center alignment
        eq.DrawLatex(0.5, 0.85, Form("#sigma_{t}(E_{sc}) = #sqrt{(#frac{%.3f}{E_{sc}})^{2} + %.3f^{2}}", p0, p1));

        // Add detector and layer information in the title
        TLatex info;
        info.SetTextSize(0.04);
        info.SetNDC();
        info.SetTextAlign(22);  // Center alignment
        if (det == 2) {  // HEC: No layer split
            info.DrawLatex(0.5, 0.92, Form("%s", detectorNames[det]));
        } else {  // Other detectors
            info.DrawLatex(0.5, 0.92, Form("%s %s Layer", detectorNames[det], layerNames[layer]));
        }

        cRes->Update();

        // Save the canvas to LXPLUS
        cRes->SaveAs(Form("/afs/cern.ch/user/s/scranepa/resolution_det%d_layer%d.pdf", det, layer));
        cRes->SaveAs(Form("/afs/cern.ch/user/s/scranepa/resolution_det%d_layer%d.png", det, layer));
        cRes->SaveAs(Form("/afs/cern.ch/user/s/scranepa/resolution_det%d_layer%d.C", det, layer));
    }
}
